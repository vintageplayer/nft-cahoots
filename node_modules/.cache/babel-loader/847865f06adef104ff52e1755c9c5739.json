{"remainingRequest":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/thread-loader/dist/cjs.js!/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js!/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js","dependencies":[{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js","mtime":1643603191419},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/babel.config.js","mtime":1641967012139},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/cache-loader/dist/cjs.js","mtime":1641967408297},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/thread-loader/dist/cjs.js","mtime":1641967405545},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js","mtime":1641967408435}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js"],"names":["Vue","Vuex","fetch","Web3","Web3Modal","Moralis","axios","collectionABI","require","fundFactoryABI","nftFundVotingJson","iAuctionHouseAbi","ethAddress","use","providerOptions","web3Modal","network","cacheProvider","roundToTwo","num","Math","round","findLowestSaleAmount","orders","lowest_sale_price","i","wei","split","listing_price","utils","fromWei","console","log","Store","state","web3","provider","accounts","networkId","chainId","active","account","maticBalance","nftListInFund","collectionList","collectionDetails","ownerAddress","contractBalance","tokenStartPrice","tokenPrice","userTokenBalance","getters","getFunds","nftFunds","getNoOfFunds","length","mutations","setWeb3","setWeb3Modal","setProvider","setAccounts","setAccount","eth","defaultAccount","setActive","isActive","setNetworkId","setChainId","setMaticBalance","setNftListInAddress","nftList","fundAddress","set","setCollectionList","setCollectionDetails","actions","connectToWallet","commit","connect","getAccounts","net","getId","on","info","parseInt","dispatch","loadCollections","collectList","imageUrl","name","returns","items","contractId","getFundContract","fundChecksumAddress","toChecksumAddress","fundContract","Contract","buyFundTokens","maticAmount","weiAmount","parseFloat","methods","buyTokens","send","value","toString","from","sellFundTokens","tokenAmount","sellTokens","pauseBuyAndSell","toggleTokenConversion","transferFunds","toAddress","to","ethAmount","toggleBuying","toggleSelling","getBalance","Number","toFixed","collectionContractId","call","symbol","balanceOf","buyingEnabled","sellingEnabled","setTokenPrice","res","fundName","fundSymbl","depositAmt","imgUrl","depositAmtInWei","fundFactoryContract","createFund","address","options","chain","Web3API","getNFTs","nftsInAddress"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport fetch from \"cross-fetch\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport Moralis from \"../plugins/moralis\";\nimport axios from \"axios\";\n\nconst collectionABI = require(\"../contractDetails/collection.json\")[\"abi\"];\nconst fundFactoryABI = require(\"../contractDetails/FundFactory.json\")[\"abi\"];\nconst nftFundVotingJson = require(\"../contractDetails/nftFundVoting.json\");\nconst iAuctionHouseAbi = require(\"../contractDetails/IAuctionHouse.json\")[\"abi\"];\nconst ethAddress = \"0x0000000000000000000000000000000000000000\";\n\nVue.use(Vuex);\n\nconst providerOptions = {\n  /* See Provider Options Section */\n};\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nfunction roundToTwo(num) {\n  return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\n//gets lowest sale amount from opensea API //NOT IN USE ANYMORE\nfunction findLowestSaleAmount(orders) {\n  var lowest_sale_price = 999999;\n  for (var i of orders) {\n    if (i[\"side\"] == 1) {\n      var wei = i[\"current_price\"].split(\".\")[0];\n      var listing_price = Web3.utils.fromWei(wei, \"ether\");\n      if (listing_price < lowest_sale_price) {\n        lowest_sale_price = listing_price;\n      }\n    }\n  }\n  console.log(lowest_sale_price);\n  return roundToTwo(lowest_sale_price);\n}\n\nexport default new Vuex.Store({\n  state: {\n    web3: null,\n    provider: null,\n    accounts: null,\n    networkId: null,\n    chainId: 0,\n    active: false,\n    account: null,\n    web3Modal: null,\n    maticBalance: 0,\n    nftListInFund: {},\n    collectionList: [],\n    collectionDetails: {ownerAddress:\"\",contractBalance:0,tokenStartPrice:0,tokenPrice:0,userTokenBalance:0},\n  },\n  getters: {\n    getFunds(state) {\n      return state.nftFunds;\n    },\n    getNoOfFunds(state) {\n      return state.nftFunds.length;\n    },\n  },\n  mutations: {\n    setWeb3(state, web3) {\n      state.web3 = web3;\n    },\n    setWeb3Modal(state, web3Modal) {\n      state.web3Modal = web3Modal;\n    },\n    setProvider(state, provider) {\n      state.provider = provider;\n    },\n    setAccounts(state, accounts) {\n      state.accounts = accounts;\n    },\n    setAccount(state, account) {\n      state.account = account;\n      state.web3.eth.defaultAccount = account;\n    },\n    setActive(state, isActive) {\n      state.active = isActive;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n    setChainId(state, chainId) {\n      state.chainId = chainId;\n    },\n    setMaticBalance(state, maticBalance) {\n      state.maticBalance = maticBalance;\n    },\n    setNftListInAddress(state, { nftList, fundAddress }) {\n      Vue.set(state.nftListInFund, fundAddress, nftList);\n    },\n    setCollectionList(state,collectionList){\n      state.collectionList=collectionList;\n    },\n    setCollectionDetails(state, collectionDetails) {\n      state.collectionDetails = collectionDetails;\n      // Vue.set(state.collectionDetails, ownerAddress, collectionDetails.ownerAddress);\n      // Vue.set(state.collectionDetails, tokenStartPrice, collectionDetails.tokenStartPrice);\n      // Vue.set(state.collectionDetails, tokenPrice, collectionDetails.tokenPrice);\n      // Vue.set(state.collectionDetails, name, collectionDetails.name);\n      // Vue.set(state.collectionDetails, symbol, collectionDetails.symbol);\n      // Vue.set(state.collectionDetails, userTokenBalance, collectionDetails.userTokenBalance);\n      // Vue.set(state.collectionDetails, contractBalance, collectionDetails.contractBalance);\n    },\n  },\n  actions: {\n    async connectToWallet({ commit }) {\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n      commit(\"setWeb3\", web3);\n      commit(\"setProvider\", provider);\n\n      //  Get Accounts\n      const accounts = await web3.eth.getAccounts();\n      commit(\"setAccounts\", accounts);\n      if (accounts.length > 0) {\n        commit(\"setAccount\", accounts[0]);\n      }\n\n      const networkId = await web3.eth.net.getId();\n      commit(\"setNetworkId\", networkId);\n\n      commit(\"setActive\", true);\n\n      provider.on(\"connect\", async (info) => {\n        let chainId = parseInt(info.chainId);\n        commit(\"setChainId\", chainId);\n        console.log(\"connect\", info);\n      });\n\n      provider.on(\"accountsChanged\", async (accounts) => {\n        if (accounts.length > 0) {\n          commit(\"setAccount\", accounts[0]);\n        } else {\n          await dispatch(\"resetApp\");\n        }\n        console.log(\"accountsChanged\");\n      });\n\n      provider.on(\"chainChanged\", async (chainId) => {\n        chainId = parseInt(chainId);\n        commit(\"setChainId\", chainId);\n        console.log(\"chainChanged\", chainId);\n      });\n    },\n    \n    async loadCollections({commit,state}){\n      \n      const collectList=[\n        {\n          imageUrl:\n            \"https://lh3.googleusercontent.com/F40quZ70BK_sefr3Np4seV9k-83tE5KpZ1gs-RxuQzWNYUDMPe-DOnLRdg3cZ_BxbJxa-mPBrq2FvC2YaxsCnlEhBGSZsScSdz1k=w286\",\n          name: \"GENESIS_FUND\",\n          returns: 15,\n          items: \"2\",\n          contractId: \"0xcB8D80AfDd6da10f77Fa7C1546250fe5e95279b5\",\n        },\n        {\n          imageUrl:\n            \"https://lh3.googleusercontent.com/cqPy7mep0-LuTeiRBrrhYpZhNy60b8tiWnyzjx0aQ5kbAdrWYLpoieWzdcvSm8oNMV6c15gVMRQdDkJeDccHPQQP76rosXgOgDZJfM8=w286\",\n          name: \"FUND2\",\n          returns: 15,\n          items: \"2\",\n          contractId: \"0x99609Da05611A544DC918B0cC9e89b31D1e55BF1\",\n        },\n      ];\n      commit(\"setCollectionList\",collectList);\n    },\n\n    async getFundContract({ commit, state }, fundAddress) {\n      try {\n        var fundChecksumAddress = Web3.utils.toChecksumAddress(fundAddress);\n        var fundContract = new state.web3.eth.Contract(collectionABI, fundChecksumAddress);\n        return fundContract;\n      } catch (error) {\n        console.log(error);\n        console.log(\"connected contract not found\");\n        return null;\n      }\n    },\n\n    async buyFundTokens({ commit }, { maticAmount, contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      var weiAmount = parseFloat(maticAmount) * 10 ** 18;\n      await fundContract.methods.buyTokens().send({\n        value: weiAmount.toString(),\n        from: this.state.account,\n      });\n      this.dispatch(\"refreshBalance\", contractId);\n    },\n\n    async sellFundTokens({ commit }, { tokenAmount, contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      console.log(tokenAmount);\n      tokenAmount = parseFloat(tokenAmount) * (10 ** 18);\n      // todo: multiple tokenAmount by 10^18 before sending\n      await fundContract.methods.sellTokens(parseInt(tokenAmount)).send({\n        from: this.state.account,\n      });\n      console.log(contractId);\n      this.dispatch(\"refreshBalance\", contractId);\n    },\n    \n    async pauseBuyAndSell({ commit }, { contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      \n      await fundContract.methods.toggleTokenConversion().send({\n        from: this.state.account,\n      });\n      this.dispatch(\"refreshBalance\", contractId);\n    },\n\n    async transferFunds({ commit }, { contractId, toAddress, value}) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      var to = Web3.utils.toChecksumAddress(toAddress);\n      var ethAmount = parseFloat(value) * (10 ** 18);\n      await fundContract.methods.transferFunds(to, parseInt(ethAmount)).send({\n        from: this.state.account\n      });\n    },\n\n\n    async pauseBuyAndSell({ commit }, { contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      \n      await fundContract.methods.toggleTokenConversion().send({\n        from: this.state.account,\n      });\n      this.dispatch(\"refreshBalance\", contractId);\n    },\n\n    async transferFunds({ commit }, { contractId, toAddress, value}) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      var to = Web3.utils.toChecksumAddress(toAddress);\n      var ethAmount = parseFloat(value) * (10 ** 18);\n      await fundContract.methods.transferFunds(to, parseInt(ethAmount)).send({\n        from: this.state.account\n      });\n    },\n\n\n\n    async toggleBuy({ commit }, { contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      \n      await fundContract.methods.toggleBuying().send({\n        from: this.state.account,\n      });\n      this.dispatch(\"refreshBalance\", contractId);\n    },\n\n    async toggleSell({ commit }, { contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      \n      await fundContract.methods.toggleSelling().send({\n        from: this.state.account,\n      });\n      this.dispatch(\"refreshBalance\", contractId);\n    },\n\n    async transferFunds({ commit }, { contractId, toAddress, value}) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      var to = Web3.utils.toChecksumAddress(toAddress);\n      var ethAmount = parseFloat(value) * (10 ** 18);\n      await fundContract.methods.transferFunds(to, parseInt(ethAmount)).send({\n        from: this.state.account\n      });\n    },\n\n\n\n    async refreshBalance({}, fundAddress) {\n      await this.dispatch(\"getMaticBalance\");\n      await this.dispatch(\"getCollectionDetails\", fundAddress);\n    },\n\n\n    async getMaticBalance({ commit, state }) {\n      var maticBalance = await state.web3.eth.getBalance(state.account);\n      commit(\"setMaticBalance\",Number( Web3.utils.fromWei(maticBalance, \"ether\")).toFixed(3));\n     \n    },\n\n    async getCollectionDetails({ commit, state }, { collectionContractId }) {\n      var collectionDetails = {};\n      console.log(\"test\", collectionContractId);\n      var fundContract = await this.dispatch(\"getFundContract\", collectionContractId);\n      collectionDetails.ownerAddress = await fundContract.methods.ownerAddress().call();\n      var tokenStartPrice = await fundContract.methods.tokenStartPrice().call();\n      collectionDetails.tokenStartPrice=Number( Web3.utils.fromWei(tokenStartPrice,\"ether\")).toFixed(3);\n      var tokenPrice = await fundContract.methods.tokenPrice().call();\n      collectionDetails.tokenPrice =Number( Web3.utils.fromWei(tokenPrice,\"ether\")).toFixed(3);\n      collectionDetails.name = await fundContract.methods.name().call();\n      collectionDetails.symbol = await fundContract.methods.symbol().call();\n      var userTokenBalance = await fundContract.methods.balanceOf(state.account).call();\n      collectionDetails.userTokenBalance =Number( Web3.utils.fromWei(userTokenBalance,\"ether\")).toFixed(3);\n      var contractBalance = await state.web3.eth.getBalance(collectionContractId);\n      collectionDetails.contractBalance =Number( Web3.utils.fromWei(contractBalance,\"ether\")).toFixed(3);\n      // collectionDetails.conversionStatus = await fundContract.methods._isTokenConversionEnabled().call();\n      collectionDetails.buyingEnabled = await fundContract.methods.buyingEnabled().call();\n      collectionDetails.sellingEnabled = await fundContract.methods.sellingEnabled().call();\n\n      commit(\"setCollectionDetails\", collectionDetails);\n    },\n\n    async modifyTokenPrice({}, { tokenPrice, contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n      var res = await fundContract.methods.setTokenPrice(tokenPrice).send({\n        from: this.state.account,\n      });\n      console.log(res);\n      await this.dispatch(\"refreshBalance\", contractId);\n    },\n\n    async createFund({ commit, state }, { fundName, fundSymbl, tokenPrice, depositAmt, imgUrl }) {\n      var depositAmtInWei = parseFloat(depositAmt) * 10 ** 18;\n      var fundFactoryContract = await this.dispatch(\"getFundFactoryContract\");\n      var res = await fundFactoryContract.methods.createFund(fundName, fundSymbl, tokenPrice, imgUrl).send({\n        from: this.state.account,\n        value: depositAmtInWei,\n      });\n      console.log(res);\n      await this.dispatch(\"loadFundData\");\n    },\n\n    async getNFTsInAddress({ commit, state }, { address }) {\n      console.log(address);\n      const options = { chain: \"rinkeby\", address: address };\n      const nftsInAddress = await Moralis.Web3API.account.getNFTs(options);\n      console.log(nftsInAddress);\n      commit(\"setNftListInAddress\", { nftList: nftsInAddress[\"result\"], fundAddress: address });\n      return nftsInAddress;\n    },\n  },\n});\n"]}]}