{"remainingRequest":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js!/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js","dependencies":[{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js","mtime":1644077535880},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/babel.config.js","mtime":1641967012139},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/cache-loader/dist/cjs.js","mtime":1641967408297},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js","mtime":1641967408435}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js"],"names":["Vue","Vuex","fetch","Web3","Web3Modal","Moralis","axios","collectionABI","require","fundFactoryABI","nftFundVotingJson","iAuctionHouseAbi","ethAddress","use","providerOptions","web3Modal","network","cacheProvider","roundToTwo","num","Math","round","findLowestSaleAmount","orders","lowest_sale_price","i","wei","split","listing_price","utils","fromWei","console","log","Store","state","web3","provider","accounts","networkId","chainId","active","account","maticBalance","nftListInFund","collectionList","collectionDetails","ownerAddress","contractBalance","tokenStartPrice","tokenPrice","userTokenBalance","buyingEnabled","sellingEnabled","chain","nftDetails","isError","getters","getFunds","nftFunds","getNoOfFunds","length","mutations","setWeb3","setWeb3Modal","setProvider","setAccounts","setAccount","eth","defaultAccount","setActive","isActive","setNetworkId","setChainId","setMaticBalance","setNftListInAddress","nftList","fundAddress","set","setCollectionList","setCollectionDetails","setNFTList","setIsError","err","setChainInCollectionDetails","actions","connectToWallet","commit","connect","getAccounts","net","getId","on","info","parseInt","dispatch","loadCollections","get","then","response","data","loadNFTs","address","collection_id","getFundContract","fundChecksumAddress","toChecksumAddress","fundContract","Contract","buyFundTokens","maticAmount","contractId","weiAmount","toWei","methods","buyTokens","send","value","from","sellFundTokens","tokenAmount","sellTokens","pauseBuyAndSell","toggleTokenConversion","toggleBuy","toggleBuying","toggleSell","toggleSelling","transferFunds","toAddress","to","ethAmount","refreshBalance","collectionContractId","getMaticBalance","getBalance","Number","toFixed","getCollectionDetails","call","_tokenBuyPrice","tokenBuyPrice","_tokenSellPrice","tokenSellPrice","name","symbol","totalSupply","balanceOf","setTokenPrice","isBuyBeingModified","res","createFund","fundName","fundSymbl","depositAmt","imgUrl","depositAmtInWei","fundFactoryContract","getNFTsInAddress","options","Web3API","getNFTs","nftsInAddress"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport fetch from \"cross-fetch\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport Moralis from \"../plugins/moralis\";\nimport axios from \"axios\";\n\nconst collectionABI = require(\"../contractDetails/collection.json\")[\"abi\"];\nconst fundFactoryABI = require(\"../contractDetails/FundFactory.json\")[\"abi\"];\nconst nftFundVotingJson = require(\"../contractDetails/nftFundVoting.json\");\nconst iAuctionHouseAbi = require(\"../contractDetails/IAuctionHouse.json\")[\"abi\"];\nconst ethAddress = \"0x0000000000000000000000000000000000000000\";\n\nVue.use(Vuex);\n\nconst providerOptions = {\n  /* See Provider Options Section */\n};\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nfunction roundToTwo(num) {\n  return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\n//gets lowest sale amount from opensea API //NOT IN USE ANYMORE\nfunction findLowestSaleAmount(orders) {\n  var lowest_sale_price = 999999;\n  for (var i of orders) {\n    if (i[\"side\"] == 1) {\n      var wei = i[\"current_price\"].split(\".\")[0];\n      var listing_price = Web3.utils.fromWei(wei, \"ether\");\n      if (listing_price < lowest_sale_price) {\n        lowest_sale_price = listing_price;\n      }\n    }\n  }\n  console.log(lowest_sale_price);\n  return roundToTwo(lowest_sale_price);\n}\n\nexport default new Vuex.Store({\n  state: {\n    web3: null,\n    provider: null,\n    accounts: null,\n    networkId: null,\n    chainId: 0,\n    active: false,\n    account: null,\n    web3Modal: null,\n    maticBalance: 0,\n    nftListInFund: {},\n    collectionList: [],\n    collectionDetails: {\n      ownerAddress: \"\",\n      contractBalance: 0,\n      tokenStartPrice: 0,\n      tokenPrice: 0,\n      userTokenBalance: 0,\n      buyingEnabled: true,\n      sellingEnabled: true,\n      chain: '',\n    },\n    nftDetails: {},\n    isError: 0,\n  },\n  getters: {\n    getFunds(state) {\n      return state.nftFunds;\n    },\n    getNoOfFunds(state) {\n      return state.nftFunds.length;\n    },\n  },\n  mutations: {\n    setWeb3(state, web3) {\n      state.web3 = web3;\n    },\n    setWeb3Modal(state, web3Modal) {\n      state.web3Modal = web3Modal;\n    },\n    setProvider(state, provider) {\n      state.provider = provider;\n    },\n    setAccounts(state, accounts) {\n      state.accounts = accounts;\n    },\n    setAccount(state, account) {\n      state.account = account;\n      state.web3.eth.defaultAccount = account;\n    },\n    setActive(state, isActive) {\n      state.active = isActive;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n    setChainId(state, chainId) {\n      state.chainId = chainId;\n    },\n    setMaticBalance(state, maticBalance) {\n      state.maticBalance = maticBalance;\n    },\n    setNftListInAddress(state, { nftList, fundAddress }) {\n      Vue.set(state.nftListInFund, fundAddress, nftList);\n    },\n    setCollectionList(state, collectionList) {\n      state.collectionList = collectionList;\n    },\n    setCollectionDetails(state, collectionDetails) {\n      state.collectionDetails = collectionDetails;\n      // Vue.set(state.collectionDetails, ownerAddress, collectionDetails.ownerAddress);\n      // Vue.set(state.collectionDetails, tokenStartPrice, collectionDetails.tokenStartPrice);\n      // Vue.set(state.collectionDetails, tokenPrice, collectionDetails.tokenPrice);\n      // Vue.set(state.collectionDetails, name, collectionDetails.name);\n      // Vue.set(state.collectionDetails, symbol, collectionDetails.symbol);\n      // Vue.set(state.collectionDetails, userTokenBalance, collectionDetails.userTokenBalance);\n      // Vue.set(state.collectionDetails, contractBalance, collectionDetails.contractBalance);\n    },\n    setNFTList(state, nftList) {\n      state.nftDetails = nftList;\n    },\n    setIsError(state, err) {\n      state.isError = err;\n    },\n    setChainInCollectionDetails(state, collectionDetails) {\n      state.collectionDetails['chain'] =  collectionDetails['chain'];\n    }\n  },\n  actions: {\n    async connectToWallet({ commit }) {\n      console.log(\"here !\");\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n      commit(\"setWeb3\", web3);\n      commit(\"setProvider\", provider);\n\n      //  Get Accounts\n      const accounts = await web3.eth.getAccounts();\n      commit(\"setAccounts\", accounts);\n      if (accounts.length > 0) {\n        commit(\"setAccount\", accounts[0]);\n      }\n\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      // if (networkId != 4) {\n      //   alert(\"Switch to Rinkeby network\");\n      //   console.log(\"not connected to Rinkeby Network\");\n      // }\n      commit(\"setNetworkId\", networkId);\n\n      commit(\"setActive\", true);\n\n      provider.on(\"connect\", async (info) => {\n        let chainId = parseInt(info.chainId);\n        commit(\"setChainId\", chainId);\n        console.log(\"connect\", info);\n      });\n\n      provider.on(\"accountsChanged\", async (accounts) => {\n        if (accounts.length > 0) {\n          commit(\"setAccount\", accounts[0]);\n        } else {\n          await dispatch(\"resetApp\");\n        }\n        console.log(\"accountsChanged\");\n      });\n\n      provider.on(\"chainChanged\", async (chainId) => {\n        chainId = parseInt(chainId);\n        commit(\"setChainId\", chainId);\n        console.log(\"chainChanged\", chainId);\n      });\n    },\n\n    async loadCollections({ commit, state }) {\n      axios.get(\"http://localhost:3000/getCollections\").then(function(response) {\n        console.log(response.data);\n        commit(\"setCollectionList\", response.data);\n      });\n    },\n\n    async loadNFTs({ commit, state }, {address, collection_id}) {\n      axios.get(\"http://localhost:3000/getNFTs?collection_id=\"+collection_id).then(function(response) {\n        console.log(response.data);\n        commit(\"setNFTList\", response.data);\n      });\n    },\n\n    async getFundContract({ commit, state }, fundAddress) {\n      try {\n        var fundChecksumAddress = Web3.utils.toChecksumAddress(fundAddress);\n        var fundContract = new state.web3.eth.Contract(collectionABI, fundChecksumAddress);\n        return fundContract;\n      } catch (error) {\n        console.log(error);\n        console.log(\"connected contract not found\");\n        return null;\n      }\n    },\n\n    async buyFundTokens({ commit }, { maticAmount, contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n        var weiAmount = Web3.utils.toWei(maticAmount, 'ether');\n        await fundContract.methods.buyTokens().send({\n          value: weiAmount,\n          from: this.state.account,\n        });\n        this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n        //return false;\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async sellFundTokens({ commit }, { tokenAmount, contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n        console.log(tokenAmount);\n        tokenAmount = Web3.utils.toWei(tokenAmount, 'ether');\n        // todo: multiple tokenAmount by 10^18 before sending\n        await fundContract.methods.sellTokens(tokenAmount).send({\n          from: this.state.account,\n        });\n        console.log(contractId);\n        this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async pauseBuyAndSell({ commit }, { contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n\n      await fundContract.methods.toggleTokenConversion().send({\n        from: this.state.account,\n      });\n      this.dispatch(\"refreshBalance\", contractId);\n    },\n\n    async toggleBuy({ commit }, { contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n\n        await fundContract.methods.toggleBuying().send({\n          from: this.state.account,\n        });\n        this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async toggleSell({ commit }, { contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n\n        await fundContract.methods.toggleSelling().send({\n          from: this.state.account,\n        });\n        this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async transferFunds({ commit }, { contractId, toAddress, value }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n        var to = Web3.utils.toChecksumAddress(toAddress);\n        var ethAmount = Web3.utils.toWei(value, 'ether');\n        await fundContract.methods.transferFunds(to, ethAmount).send({\n          from: this.state.account,\n        });\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async refreshBalance({}, fundAddress) {\n      await this.dispatch(\"getMaticBalance\");\n      await this.dispatch(\"getCollectionDetails\", { collectionContractId: fundAddress });\n    },\n\n    async getMaticBalance({ commit, state }) {\n      var maticBalance = await state.web3.eth.getBalance(state.account);\n      commit(\"setMaticBalance\", Number(Web3.utils.fromWei(maticBalance, \"ether\")).toFixed(3));\n    },\n\n    async getCollectionDetails({ commit, state }, { collectionContractId, collection_id }) {\n      var collectionDetails = {};\n      console.log(collection_id)\n\n      \n      \n      var fundContract = await this.dispatch(\"getFundContract\", collectionContractId);\n      collectionDetails.ownerAddress = await fundContract.methods.ownerAddress().call();\n      var tokenBuyPrice = await fundContract.methods._tokenBuyPrice().call();\n      collectionDetails.tokenBuyPrice = Number(Web3.utils.fromWei(tokenBuyPrice, \"ether\")).toFixed(3);\n      var tokenSellPrice = await fundContract.methods._tokenSellPrice().call();\n      collectionDetails.tokenSellPrice = Number(Web3.utils.fromWei(tokenSellPrice, \"ether\")).toFixed(3);\n      collectionDetails.name = await fundContract.methods.name().call();\n      collectionDetails.symbol = await fundContract.methods.symbol().call();\n      collectionDetails.totalSupply = Number(Web3.utils.fromWei(await fundContract.methods.totalSupply().call())).toFixed(3);\n      var userTokenBalance = await fundContract.methods.balanceOf(state.account).call();\n      collectionDetails.userTokenBalance = Number(Web3.utils.fromWei(userTokenBalance, \"ether\")).toFixed(3);\n      var contractBalance = await state.web3.eth.getBalance(collectionContractId);\n      collectionDetails.contractBalance = Number(Web3.utils.fromWei(contractBalance, \"ether\")).toFixed(3);\n      // collectionDetails.buyingEnabled=true;\n      // collectionDetails.sellingEnabled=true;\n      collectionDetails.buyingEnabled = await fundContract.methods.buyingEnabled().call();\n      collectionDetails.sellingEnabled = await fundContract.methods.sellingEnabled().call();\n\n      \n      axios.get(\"http://localhost:3000/getCollectionDetails?collection_id=\"+collection_id).then(function(response) {\n        \n        commit(\"setChainInCollectionDetails\", response.data);\n\n      });\n\n      commit(\"setCollectionDetails\", collectionDetails);\n    },\n\n    async setTokenPrice({ commit }, { tokenPrice, isBuyBeingModified, contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n        tokenAmount = Web3.utils.toWei(tokenPrice, 'ether');\n        var res = await fundContract.methods.setTokenPrice(tokenAmount, isBuyBeingModified).send({\n          from: this.state.account,\n        });\n        \n        await this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async createFund({ commit, state }, { fundName, fundSymbl, tokenPrice, depositAmt, imgUrl }) {\n      var depositAmtInWei = Web3.utils.toWei(depositAmt, 'ether');\n      var fundFactoryContract = await this.dispatch(\"getFundFactoryContract\");\n      var res = await fundFactoryContract.methods.createFund(fundName, fundSymbl, tokenPrice, imgUrl).send({\n        from: this.state.account,\n        value: depositAmtInWei,\n      });\n\n      await this.dispatch(\"loadFundData\");\n    },\n\n    async getNFTsInAddress({ commit, state }, { address }) {\n      console.log(address);\n      const options = { chain: \"rinkeby\", address: address };\n      const nftsInAddress = await Moralis.Web3API.account.getNFTs(options);\n      console.log(nftsInAddress);\n      commit(\"setNftListInAddress\", { nftList: nftsInAddress[\"result\"], fundAddress: address });\n      return nftsInAddress;\n    },\n  },\n});\n"]}]}