{"remainingRequest":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js!/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/web3modal-vue/src/providers/connectors/mewconnect.js","dependencies":[{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/web3modal-vue/src/providers/connectors/mewconnect.js","mtime":1641967406422},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/babel.config.js","mtime":1641967012139},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/cache-loader/dist/cjs.js","mtime":1641967408297},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js","mtime":1641967408435}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9nYXV0aGFtZ3NhYmFoaXQvd29ya3NwYWNlL2pvaW50bmZ0L2pvaW50bmZ0LWRhcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgeyBnZXRDaGFpbklkIH0gZnJvbSAiLi4vLi4vaGVscGVycyI7Cgp2YXIgQ29ubmVjdFRvTWV3Q29ubmVjdCA9IGZ1bmN0aW9uIENvbm5lY3RUb01ld0Nvbm5lY3QoTWV3Q29ubmVjdFByb3ZpZGVyLCBvcHRzKSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBpbmZ1cmFJZCwgcnBjLCBjaGFpbklkLCBtZXdDb25uZWN0LCBwcm92aWRlciwgYWRkcmVzczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGluZnVyYUlkID0gIiI7CiAgICAgICAgICAgICAgcnBjID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgIGNoYWluSWQgPSAxOwoKICAgICAgICAgICAgICBpZiAob3B0cykgewogICAgICAgICAgICAgICAgaW5mdXJhSWQgPSBvcHRzLmluZnVyYUlkIHx8ICIiOwogICAgICAgICAgICAgICAgcnBjID0gb3B0cy5ycGMgfHwgdW5kZWZpbmVkOwoKICAgICAgICAgICAgICAgIGlmIChvcHRzLmluZnVyYUlkICYmICFycGMpIHsKICAgICAgICAgICAgICAgICAgcnBjID0gIndzczovL21haW5uZXQuaW5mdXJhLmlvL3dzL3YzLyIuY29uY2F0KGluZnVyYUlkKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjaGFpbklkID0gb3B0cy5uZXR3b3JrICYmIGdldENoYWluSWQob3B0cy5uZXR3b3JrKSA/IGdldENoYWluSWQob3B0cy5uZXR3b3JrKSA6IDE7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoTWV3Q29ubmVjdFByb3ZpZGVyLlByb3ZpZGVyLmlzQ29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIG1ld0Nvbm5lY3QgPSBuZXcgTWV3Q29ubmVjdFByb3ZpZGVyLlByb3ZpZGVyKCk7CiAgICAgICAgICAgICAgcHJvdmlkZXIgPSBtZXdDb25uZWN0Lm1ha2VXZWIzUHJvdmlkZXIoY2hhaW5JZCwgcnBjLCB0cnVlKTsKICAgICAgICAgICAgICBtZXdDb25uZWN0Lm9uKCdkaXNjb25uZWN0ZWQnLCBmdW5jdGlvbiAoKSB7fSk7CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDg7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgIHJldHVybiBtZXdDb25uZWN0LmVuYWJsZSgpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBhZGRyZXNzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhZGRyZXNzKTsgLy8gdG9kbyByZW1vdmUgZGV2IGl0ZW0KCiAgICAgICAgICAgICAgcmVzb2x2ZShwcm92aWRlcik7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE5OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSg4KTsKICAgICAgICAgICAgICByZWplY3QoX2NvbnRleHQudDApOwoKICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1s4LCAxNl1dKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKF94LCBfeDIpIHsKICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpKTsKfTsKCmV4cG9ydCBkZWZhdWx0IENvbm5lY3RUb01ld0Nvbm5lY3Q7"},{"version":3,"sources":["/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/web3modal-vue/src/providers/connectors/mewconnect.js"],"names":["getChainId","ConnectToMewConnect","MewConnectProvider","opts","Promise","resolve","reject","infuraId","rpc","undefined","chainId","network","Provider","isConnected","mewConnect","provider","makeWeb3Provider","on","enable","address","console","log"],"mappings":";;;AAAA,SAAQA,UAAR,QAAyB,eAAzB;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACxBC,kBADwB,EAExBC,IAFwB,EAGvB;AACD,SAAO,IAAIC,OAAJ;AAAA,uEAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,cAAAA,QADW,GACA,EADA;AAEXC,cAAAA,GAFW,GAELC,SAFK;AAGXC,cAAAA,OAHW,GAGD,CAHC;;AAIf,kBAAIP,IAAJ,EAAU;AACNI,gBAAAA,QAAQ,GAAGJ,IAAI,CAACI,QAAL,IAAiB,EAA5B;AACAC,gBAAAA,GAAG,GAAGL,IAAI,CAACK,GAAL,IAAYC,SAAlB;;AACA,oBAAIN,IAAI,CAACI,QAAL,IAAiB,CAACC,GAAtB,EAA2B;AACvBA,kBAAAA,GAAG,2CAAoCD,QAApC,CAAH;AACH;;AACDG,gBAAAA,OAAO,GACHP,IAAI,CAACQ,OAAL,IAAgBX,UAAU,CAACG,IAAI,CAACQ,OAAN,CAA1B,GAA2CX,UAAU,CAACG,IAAI,CAACQ,OAAN,CAArD,GAAsE,CAD1E;AAEH;;AAZc,kBAaVT,kBAAkB,CAACU,QAAnB,CAA4BC,WAblB;AAAA;AAAA;AAAA;;AAcLC,cAAAA,UAdK,GAcQ,IAAIZ,kBAAkB,CAACU,QAAvB,EAdR;AAeLG,cAAAA,QAfK,GAeMD,UAAU,CAACE,gBAAX,CAA4BN,OAA5B,EAAqCF,GAArC,EAA0C,IAA1C,CAfN;AAiBXM,cAAAA,UAAU,CAACG,EAAX,CAAc,cAAd,EAA8B,YAAM,CACnC,CADD;AAjBW;AAAA;AAAA,qBAoBeH,UAAU,CAACI,MAAX,EApBf;;AAAA;AAoBDC,cAAAA,OApBC;AAqBPC,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EArBO,CAqBe;;AACtBd,cAAAA,OAAO,CAACU,QAAD,CAAP;AAtBO;AAAA;;AAAA;AAAA;AAAA;AAwBPT,cAAAA,MAAM,aAAN;;AAxBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AA6BH,CAjCD;;AAmCA,eAAeL,mBAAf","sourcesContent":["import {getChainId} from \"../../helpers\";\nconst ConnectToMewConnect = (\n    MewConnectProvider,\n    opts\n) => {\n    return new Promise(async (resolve, reject) => {\n        let infuraId = \"\";\n        let rpc = undefined;\n        let chainId = 1;\n        if (opts) {\n            infuraId = opts.infuraId || \"\";\n            rpc = opts.rpc || undefined;\n            if (opts.infuraId && !rpc) {\n                rpc = `wss://mainnet.infura.io/ws/v3/${infuraId}`\n            }\n            chainId =\n                opts.network && getChainId(opts.network) ? getChainId(opts.network) : 1;\n        }\n        if (!MewConnectProvider.Provider.isConnected) {\n            const mewConnect = new MewConnectProvider.Provider();\n            const provider = mewConnect.makeWeb3Provider(chainId, rpc, true)\n\n            mewConnect.on('disconnected', () => {\n            })\n            try {\n                const address = await mewConnect.enable();\n                console.log(address); // todo remove dev item\n                resolve(provider);\n            } catch (e) {\n                reject(e);\n            }\n        }\n\n    });\n};\n\nexport default ConnectToMewConnect;"]}]}