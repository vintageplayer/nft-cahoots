{"remainingRequest":"/Users/gauthamgsabahit/workspace/jointnft/nft-cahoots/node_modules/babel-loader/lib/index.js!/Users/gauthamgsabahit/workspace/jointnft/nft-cahoots/node_modules/web3modal-vue/src/providers/connectors/torus.js","dependencies":[{"path":"/Users/gauthamgsabahit/workspace/jointnft/nft-cahoots/node_modules/web3modal-vue/src/providers/connectors/torus.js","mtime":1641967406461},{"path":"/Users/gauthamgsabahit/workspace/jointnft/nft-cahoots/babel.config.js","mtime":1641967012139},{"path":"/Users/gauthamgsabahit/workspace/jointnft/nft-cahoots/node_modules/cache-loader/dist/cjs.js","mtime":1641967408297},{"path":"/Users/gauthamgsabahit/workspace/jointnft/nft-cahoots/node_modules/babel-loader/lib/index.js","mtime":1641967408435}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2dhdXRoYW1nc2FiYWhpdC93b3Jrc3BhY2Uvam9pbnRuZnQvbmZ0LWNhaG9vdHMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2dhdXRoYW1nc2FiYWhpdC93b3Jrc3BhY2Uvam9pbnRuZnQvbmZ0LWNhaG9vdHMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwoKLy8gU3VwcG9ydHMgVG9ydXMgcGFja2FnZSB2ZXJzaW9ucyAwLjIuKgp2YXIgQ29ubmVjdFRvVG9ydXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihUb3J1cywgb3B0cykgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgIHZhciBfb3B0cyRjb25maWcsIF9vcHRzJGNvbmZpZzIsIF9vcHRzJGNvbmZpZzMsIGJ1dHRvblBvc2l0aW9uLCBhcGlLZXksIG1vZGFsWkluZGV4LCBuZXR3b3JrLCBkZWZhdWx0VmVyaWZpZXIsIHRvcnVzLCBwcm92aWRlcjsKCiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0cwogICAgICAgICAgICAgICAgICAgICAgICBidXR0b25Qb3NpdGlvbiA9ICJib3R0b20tbGVmdCI7CiAgICAgICAgICAgICAgICAgICAgICAgIGFwaUtleSA9ICJ0b3J1cy1kZWZhdWx0IjsKICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxaSW5kZXggPSA5OTk5OTsKICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29yayA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0OiAibWFpbm5ldCIKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZlcmlmaWVyID0gdW5kZWZpbmVkOyAvLyBwYXJzaW5nIHRvIFRvcnVzIGludGVyZmFjZXMKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhcnNpbmcgdG8gVG9ydXMgaW50ZXJmYWNlcwogICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrID0gb3B0cy5uZXR3b3JrUGFyYW1zIHx8IG9wdHMubmV0d29yayA/IF9vYmplY3RTcHJlYWQoewogICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IG9wdHMubmV0d29yawogICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzLm5ldHdvcmtQYXJhbXMpIDogbmV0d29yazsKICAgICAgICAgICAgICAgICAgICAgICAgdG9ydXMgPSBuZXcgVG9ydXMoewogICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblBvc2l0aW9uOiAoKF9vcHRzJGNvbmZpZyA9IG9wdHMuY29uZmlnKSA9PT0gbnVsbCB8fCBfb3B0cyRjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRzJGNvbmZpZy5idXR0b25Qb3NpdGlvbikgfHwgYnV0dG9uUG9zaXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpS2V5OiAoKF9vcHRzJGNvbmZpZzIgPSBvcHRzLmNvbmZpZykgPT09IG51bGwgfHwgX29wdHMkY29uZmlnMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdHMkY29uZmlnMi5hcGlLZXkpIHx8IGFwaUtleSwKICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbFpJbmRleDogKChfb3B0cyRjb25maWczID0gb3B0cy5jb25maWcpID09PSBudWxsIHx8IF9vcHRzJGNvbmZpZzMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRzJGNvbmZpZzMubW9kYWxaSW5kZXgpIHx8IG1vZGFsWkluZGV4CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b3J1cy5pbml0KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1RvcnVzQnV0dG9uOiBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzLmNvbmZpZyksIHt9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29yazogbmV0d29yawogICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubG9naW5QYXJhbXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmVyaWZpZXIgPSBvcHRzLmxvZ2luUGFyYW1zLnZlcmlmaWVyOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b3J1cy5sb2dpbih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZpZXI6IGRlZmF1bHRWZXJpZmllcgogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlciA9IHRvcnVzLnByb3ZpZGVyOwogICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlci50b3J1cyA9IHRvcnVzOwogICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHByb3ZpZGVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIxOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTg7CiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChfY29udGV4dC50MCk7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDE4XV0pOwogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDMsIF94NCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSgpKSk7CgogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gQ29ubmVjdFRvVG9ydXMoX3gsIF94MikgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7CgpleHBvcnQgZGVmYXVsdCBDb25uZWN0VG9Ub3J1czs="},{"version":3,"sources":["/Users/gauthamgsabahit/workspace/jointnft/nft-cahoots/node_modules/web3modal-vue/src/providers/connectors/torus.js"],"names":["ConnectToTorus","Torus","opts","Promise","resolve","reject","buttonPosition","apiKey","modalZIndex","network","host","defaultVerifier","undefined","networkParams","torus","config","init","showTorusButton","loginParams","verifier","login","provider"],"mappings":";;;;;AAAA;AACA,IAAMA,cAAc;AAAA,qEAAG,kBAAOC,KAAP,EAAcC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA,8CACZ,IAAIC,OAAJ;AAAA,kFAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX;AACIC,wBAAAA,cAHO,GAGU,aAHV;AAIPC,wBAAAA,MAJO,GAIE,eAJF;AAKPC,wBAAAA,WALO,GAKO,KALP;AAMPC,wBAAAA,OANO,GAMG;AAACC,0BAAAA,IAAI,EAAE;AAAP,yBANH;AAOPC,wBAAAA,eAPO,GAOWC,SAPX,EASX;;AAAA;AACAH,wBAAAA,OAAO,GACHP,IAAI,CAACW,aAAL,IAAsBX,IAAI,CAACO,OAA3B;AACOC,0BAAAA,IAAI,EAAER,IAAI,CAACO;AADlB,2BAC8BP,IAAI,CAACW,aADnC,IAEMJ,OAHV;AAKMK,wBAAAA,KAfK,GAeG,IAAIb,KAAJ,CAAU;AACpBK,0BAAAA,cAAc,EAAE,iBAAAJ,IAAI,CAACa,MAAL,8DAAaT,cAAb,KAA+BA,cAD3B;AAEpBC,0BAAAA,MAAM,EAAE,kBAAAL,IAAI,CAACa,MAAL,gEAAaR,MAAb,KAAuBA,MAFX;AAGpBC,0BAAAA,WAAW,EAAE,kBAAAN,IAAI,CAACa,MAAL,gEAAaP,WAAb,KAA4BA;AAHrB,yBAAV,CAfH;AAAA;AAAA,+BAoBLM,KAAK,CAACE,IAAN;AACFC,0BAAAA,eAAe,EAAE;AADf,2BAECf,IAAI,CAACa,MAFN;AAGFN,0BAAAA,OAAO,EAAPA;AAHE,2BApBK;;AAAA;AA0BX,4BAAIP,IAAI,CAACgB,WAAT,EAAsB;AAClBP,0BAAAA,eAAe,GAAGT,IAAI,CAACgB,WAAL,CAAiBC,QAAnC;AACH;;AA5BU;AAAA,+BA6BLL,KAAK,CAACM,KAAN,CAAY;AAACD,0BAAAA,QAAQ,EAAER;AAAX,yBAAZ,CA7BK;;AAAA;AA8BLU,wBAAAA,QA9BK,GA8BMP,KAAK,CAACO,QA9BZ;AA+BXA,wBAAAA,QAAQ,CAACP,KAAT,GAAiBA,KAAjB;AACAV,wBAAAA,OAAO,CAACiB,QAAD,CAAP;AAhCW;AAAA;;AAAA;AAAA;AAAA;AAkCXhB,wBAAAA,MAAM,aAAN;;AAlCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdL,cAAc;AAAA;AAAA;AAAA,GAApB;;AAwCA,eAAeA,cAAf","sourcesContent":["// Supports Torus package versions 0.2.*\nconst ConnectToTorus = async (Torus, opts) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            // defaults\n            let buttonPosition = \"bottom-left\";\n            let apiKey = \"torus-default\";\n            let modalZIndex = 99999;\n            let network = {host: \"mainnet\"};\n            let defaultVerifier = undefined;\n\n            // parsing to Torus interfaces\n            network =\n                opts.networkParams || opts.network\n                    ? {host: opts.network, ...opts.networkParams}\n                    : network;\n\n            const torus = new Torus({\n                buttonPosition: opts.config?.buttonPosition || buttonPosition,\n                apiKey: opts.config?.apiKey || apiKey,\n                modalZIndex: opts.config?.modalZIndex || modalZIndex\n            });\n            await torus.init({\n                showTorusButton: false,\n                ...opts.config,\n                network\n            });\n\n            if (opts.loginParams) {\n                defaultVerifier = opts.loginParams.verifier;\n            }\n            await torus.login({verifier: defaultVerifier});\n            const provider = torus.provider;\n            provider.torus = torus;\n            resolve(provider);\n        } catch (err) {\n            reject(err);\n        }\n    });\n};\n\nexport default ConnectToTorus;"]}]}