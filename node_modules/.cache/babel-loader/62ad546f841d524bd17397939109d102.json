{"remainingRequest":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/thread-loader/dist/cjs.js!/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js!/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/web3modal-vue/src/providers/connectors/torus.js","dependencies":[{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/web3modal-vue/src/providers/connectors/torus.js","mtime":1641967406461},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/babel.config.js","mtime":1641967012139},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/cache-loader/dist/cjs.js","mtime":1641967408297},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/thread-loader/dist/cjs.js","mtime":1641967405545},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js","mtime":1641967408435}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2dhdXRoYW1nc2FiYWhpdC93b3Jrc3BhY2Uvam9pbnRuZnQvam9pbnRuZnQtZGFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvZ2F1dGhhbWdzYWJhaGl0L3dvcmtzcGFjZS9qb2ludG5mdC9qb2ludG5mdC1kYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKCi8vIFN1cHBvcnRzIFRvcnVzIHBhY2thZ2UgdmVyc2lvbnMgMC4yLioKdmFyIENvbm5lY3RUb1RvcnVzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoVG9ydXMsIG9wdHMpIHsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBuZXcgUHJvbWlzZSggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICB2YXIgX29wdHMkY29uZmlnLCBfb3B0cyRjb25maWcyLCBfb3B0cyRjb25maWczLCBidXR0b25Qb3NpdGlvbiwgYXBpS2V5LCBtb2RhbFpJbmRleCwgbmV0d29yaywgZGVmYXVsdFZlcmlmaWVyLCB0b3J1cywgcHJvdmlkZXI7CgogICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdHMKICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uUG9zaXRpb24gPSAiYm90dG9tLWxlZnQiOwogICAgICAgICAgICAgICAgICAgICAgICBhcGlLZXkgPSAidG9ydXMtZGVmYXVsdCI7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsWkluZGV4ID0gOTk5OTk7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmsgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogIm1haW5uZXQiCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWZXJpZmllciA9IHVuZGVmaW5lZDsgLy8gcGFyc2luZyB0byBUb3J1cyBpbnRlcmZhY2VzCgogICAgICAgICAgICAgICAgICAgICAgICAvLyBwYXJzaW5nIHRvIFRvcnVzIGludGVyZmFjZXMKICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29yayA9IG9wdHMubmV0d29ya1BhcmFtcyB8fCBvcHRzLm5ldHdvcmsgPyBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0OiBvcHRzLm5ldHdvcmsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cy5uZXR3b3JrUGFyYW1zKSA6IG5ldHdvcms7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvcnVzID0gbmV3IFRvcnVzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25Qb3NpdGlvbjogKChfb3B0cyRjb25maWcgPSBvcHRzLmNvbmZpZykgPT09IG51bGwgfHwgX29wdHMkY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0cyRjb25maWcuYnV0dG9uUG9zaXRpb24pIHx8IGJ1dHRvblBvc2l0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFwaUtleTogKChfb3B0cyRjb25maWcyID0gb3B0cy5jb25maWcpID09PSBudWxsIHx8IF9vcHRzJGNvbmZpZzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRzJGNvbmZpZzIuYXBpS2V5KSB8fCBhcGlLZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxaSW5kZXg6ICgoX29wdHMkY29uZmlnMyA9IG9wdHMuY29uZmlnKSA9PT0gbnVsbCB8fCBfb3B0cyRjb25maWczID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0cyRjb25maWczLm1vZGFsWkluZGV4KSB8fCBtb2RhbFpJbmRleAogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9ydXMuaW5pdChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoewogICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUb3J1c0J1dHRvbjogZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cy5jb25maWcpLCB7fSwgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcms6IG5ldHdvcmsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmxvZ2luUGFyYW1zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZlcmlmaWVyID0gb3B0cy5sb2dpblBhcmFtcy52ZXJpZmllcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9ydXMubG9naW4oewogICAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmaWVyOiBkZWZhdWx0VmVyaWZpZXIKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIgPSB0b3J1cy5wcm92aWRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIudG9ydXMgPSB0b3J1czsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwcm92aWRlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE4OwogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoX2NvbnRleHQudDApOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCAxOF1dKTsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gzLCBfeDQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0oKSkpOwoKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIENvbm5lY3RUb1RvcnVzKF94LCBfeDIpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgQ29ubmVjdFRvVG9ydXM7"},{"version":3,"sources":["/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/web3modal-vue/src/providers/connectors/torus.js"],"names":["ConnectToTorus","Torus","opts","Promise","resolve","reject","buttonPosition","apiKey","modalZIndex","network","host","defaultVerifier","undefined","networkParams","torus","config","init","showTorusButton","loginParams","verifier","login","provider"],"mappings":";;;;;AAAA;AACA,IAAMA,cAAc;AAAA,qEAAG,kBAAOC,KAAP,EAAcC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA,8CACZ,IAAIC,OAAJ;AAAA,kFAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX;AACIC,wBAAAA,cAHO,GAGU,aAHV;AAIPC,wBAAAA,MAJO,GAIE,eAJF;AAKPC,wBAAAA,WALO,GAKO,KALP;AAMPC,wBAAAA,OANO,GAMG;AAACC,0BAAAA,IAAI,EAAE;AAAP,yBANH;AAOPC,wBAAAA,eAPO,GAOWC,SAPX,EASX;;AAAA;AACAH,wBAAAA,OAAO,GACHP,IAAI,CAACW,aAAL,IAAsBX,IAAI,CAACO,OAA3B;AACOC,0BAAAA,IAAI,EAAER,IAAI,CAACO;AADlB,2BAC8BP,IAAI,CAACW,aADnC,IAEMJ,OAHV;AAKMK,wBAAAA,KAfK,GAeG,IAAIb,KAAJ,CAAU;AACpBK,0BAAAA,cAAc,EAAE,iBAAAJ,IAAI,CAACa,MAAL,8DAAaT,cAAb,KAA+BA,cAD3B;AAEpBC,0BAAAA,MAAM,EAAE,kBAAAL,IAAI,CAACa,MAAL,gEAAaR,MAAb,KAAuBA,MAFX;AAGpBC,0BAAAA,WAAW,EAAE,kBAAAN,IAAI,CAACa,MAAL,gEAAaP,WAAb,KAA4BA;AAHrB,yBAAV,CAfH;AAAA;AAAA,+BAoBLM,KAAK,CAACE,IAAN;AACFC,0BAAAA,eAAe,EAAE;AADf,2BAECf,IAAI,CAACa,MAFN;AAGFN,0BAAAA,OAAO,EAAPA;AAHE,2BApBK;;AAAA;AA0BX,4BAAIP,IAAI,CAACgB,WAAT,EAAsB;AAClBP,0BAAAA,eAAe,GAAGT,IAAI,CAACgB,WAAL,CAAiBC,QAAnC;AACH;;AA5BU;AAAA,+BA6BLL,KAAK,CAACM,KAAN,CAAY;AAACD,0BAAAA,QAAQ,EAAER;AAAX,yBAAZ,CA7BK;;AAAA;AA8BLU,wBAAAA,QA9BK,GA8BMP,KAAK,CAACO,QA9BZ;AA+BXA,wBAAAA,QAAQ,CAACP,KAAT,GAAiBA,KAAjB;AACAV,wBAAAA,OAAO,CAACiB,QAAD,CAAP;AAhCW;AAAA;;AAAA;AAAA;AAAA;AAkCXhB,wBAAAA,MAAM,aAAN;;AAlCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdL,cAAc;AAAA;AAAA;AAAA,GAApB;;AAwCA,eAAeA,cAAf","sourcesContent":["// Supports Torus package versions 0.2.*\nconst ConnectToTorus = async (Torus, opts) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            // defaults\n            let buttonPosition = \"bottom-left\";\n            let apiKey = \"torus-default\";\n            let modalZIndex = 99999;\n            let network = {host: \"mainnet\"};\n            let defaultVerifier = undefined;\n\n            // parsing to Torus interfaces\n            network =\n                opts.networkParams || opts.network\n                    ? {host: opts.network, ...opts.networkParams}\n                    : network;\n\n            const torus = new Torus({\n                buttonPosition: opts.config?.buttonPosition || buttonPosition,\n                apiKey: opts.config?.apiKey || apiKey,\n                modalZIndex: opts.config?.modalZIndex || modalZIndex\n            });\n            await torus.init({\n                showTorusButton: false,\n                ...opts.config,\n                network\n            });\n\n            if (opts.loginParams) {\n                defaultVerifier = opts.loginParams.verifier;\n            }\n            await torus.login({verifier: defaultVerifier});\n            const provider = torus.provider;\n            provider.torus = torus;\n            resolve(provider);\n        } catch (err) {\n            reject(err);\n        }\n    });\n};\n\nexport default ConnectToTorus;"]}]}