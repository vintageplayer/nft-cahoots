{"remainingRequest":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js!/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js","dependencies":[{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js","mtime":1643867364382},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/babel.config.js","mtime":1641967012139},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/cache-loader/dist/cjs.js","mtime":1641967408297},{"path":"/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/node_modules/babel-loader/lib/index.js","mtime":1641967408435}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/gauthamgsabahit/workspace/jointnft/jointnft-dapp/src/store/index.js"],"names":["Vue","Vuex","fetch","Web3","Web3Modal","Moralis","axios","collectionABI","require","fundFactoryABI","nftFundVotingJson","iAuctionHouseAbi","ethAddress","use","providerOptions","web3Modal","network","cacheProvider","roundToTwo","num","Math","round","findLowestSaleAmount","orders","lowest_sale_price","i","wei","split","listing_price","utils","fromWei","console","log","Store","state","web3","provider","accounts","networkId","chainId","active","account","maticBalance","nftListInFund","collectionList","collectionDetails","ownerAddress","contractBalance","tokenStartPrice","tokenPrice","userTokenBalance","buyingEnabled","sellingEnabled","nftDetails","isError","getters","getFunds","nftFunds","getNoOfFunds","length","mutations","setWeb3","setWeb3Modal","setProvider","setAccounts","setAccount","eth","defaultAccount","setActive","isActive","setNetworkId","setChainId","setMaticBalance","setNftListInAddress","nftList","fundAddress","set","setCollectionList","setCollectionDetails","setNFTList","setIsError","err","actions","connectToWallet","commit","connect","getAccounts","net","getId","alert","on","info","parseInt","dispatch","loadCollections","get","then","response","data","loadNFTs","address","collection_id","getFundContract","fundChecksumAddress","toChecksumAddress","fundContract","Contract","buyFundTokens","maticAmount","contractId","weiAmount","toWei","methods","buyTokens","send","value","from","sellFundTokens","tokenAmount","sellTokens","pauseBuyAndSell","toggleTokenConversion","toggleBuy","toggleBuying","toggleSell","toggleSelling","transferFunds","toAddress","to","ethAmount","refreshBalance","collectionContractId","getMaticBalance","getBalance","Number","toFixed","getCollectionDetails","call","_tokenBuyPrice","tokenBuyPrice","_tokenSellPrice","tokenSellPrice","name","symbol","totalSupply","balanceOf","setTokenPrice","isBuyBeingModified","res","createFund","fundName","fundSymbl","depositAmt","imgUrl","depositAmtInWei","fundFactoryContract","getNFTsInAddress","options","chain","Web3API","getNFTs","nftsInAddress"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport fetch from \"cross-fetch\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport Moralis from \"../plugins/moralis\";\nimport axios from \"axios\";\n\nconst collectionABI = require(\"../contractDetails/collection.json\")[\"abi\"];\nconst fundFactoryABI = require(\"../contractDetails/FundFactory.json\")[\"abi\"];\nconst nftFundVotingJson = require(\"../contractDetails/nftFundVoting.json\");\nconst iAuctionHouseAbi = require(\"../contractDetails/IAuctionHouse.json\")[\"abi\"];\nconst ethAddress = \"0x0000000000000000000000000000000000000000\";\n\nVue.use(Vuex);\n\nconst providerOptions = {\n  /* See Provider Options Section */\n};\n\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nfunction roundToTwo(num) {\n  return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\n//gets lowest sale amount from opensea API //NOT IN USE ANYMORE\nfunction findLowestSaleAmount(orders) {\n  var lowest_sale_price = 999999;\n  for (var i of orders) {\n    if (i[\"side\"] == 1) {\n      var wei = i[\"current_price\"].split(\".\")[0];\n      var listing_price = Web3.utils.fromWei(wei, \"ether\");\n      if (listing_price < lowest_sale_price) {\n        lowest_sale_price = listing_price;\n      }\n    }\n  }\n  console.log(lowest_sale_price);\n  return roundToTwo(lowest_sale_price);\n}\n\nexport default new Vuex.Store({\n  state: {\n    web3: null,\n    provider: null,\n    accounts: null,\n    networkId: null,\n    chainId: 0,\n    active: false,\n    account: null,\n    web3Modal: null,\n    maticBalance: 0,\n    nftListInFund: {},\n    collectionList: [],\n    collectionDetails: {\n      ownerAddress: \"\",\n      contractBalance: 0,\n      tokenStartPrice: 0,\n      tokenPrice: 0,\n      userTokenBalance: 0,\n      buyingEnabled: true,\n      sellingEnabled: true,\n    },\n    nftDetails: {},\n    isError: 0,\n  },\n  getters: {\n    getFunds(state) {\n      return state.nftFunds;\n    },\n    getNoOfFunds(state) {\n      return state.nftFunds.length;\n    },\n  },\n  mutations: {\n    setWeb3(state, web3) {\n      state.web3 = web3;\n    },\n    setWeb3Modal(state, web3Modal) {\n      state.web3Modal = web3Modal;\n    },\n    setProvider(state, provider) {\n      state.provider = provider;\n    },\n    setAccounts(state, accounts) {\n      state.accounts = accounts;\n    },\n    setAccount(state, account) {\n      state.account = account;\n      state.web3.eth.defaultAccount = account;\n    },\n    setActive(state, isActive) {\n      state.active = isActive;\n    },\n    setNetworkId(state, networkId) {\n      state.networkId = networkId;\n    },\n    setChainId(state, chainId) {\n      state.chainId = chainId;\n    },\n    setMaticBalance(state, maticBalance) {\n      state.maticBalance = maticBalance;\n    },\n    setNftListInAddress(state, { nftList, fundAddress }) {\n      Vue.set(state.nftListInFund, fundAddress, nftList);\n    },\n    setCollectionList(state, collectionList) {\n      state.collectionList = collectionList;\n    },\n    setCollectionDetails(state, collectionDetails) {\n      state.collectionDetails = collectionDetails;\n      // Vue.set(state.collectionDetails, ownerAddress, collectionDetails.ownerAddress);\n      // Vue.set(state.collectionDetails, tokenStartPrice, collectionDetails.tokenStartPrice);\n      // Vue.set(state.collectionDetails, tokenPrice, collectionDetails.tokenPrice);\n      // Vue.set(state.collectionDetails, name, collectionDetails.name);\n      // Vue.set(state.collectionDetails, symbol, collectionDetails.symbol);\n      // Vue.set(state.collectionDetails, userTokenBalance, collectionDetails.userTokenBalance);\n      // Vue.set(state.collectionDetails, contractBalance, collectionDetails.contractBalance);\n    },\n    setNFTList(state, nftList) {\n      state.nftDetails = nftList;\n    },\n    setIsError(state, err) {\n      state.isError = err;\n    },\n  },\n  actions: {\n    async connectToWallet({ commit }) {\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n      commit(\"setWeb3\", web3);\n      commit(\"setProvider\", provider);\n\n      //  Get Accounts\n      const accounts = await web3.eth.getAccounts();\n      commit(\"setAccounts\", accounts);\n      if (accounts.length > 0) {\n        commit(\"setAccount\", accounts[0]);\n      }\n\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      if (networkId != 4) {\n        alert(\"Switch to Rinkeby network\");\n        console.log(\"not connected to Rinkeby Network\");\n      }\n      commit(\"setNetworkId\", networkId);\n\n      commit(\"setActive\", true);\n\n      provider.on(\"connect\", async (info) => {\n        let chainId = parseInt(info.chainId);\n        commit(\"setChainId\", chainId);\n        console.log(\"connect\", info);\n      });\n\n      provider.on(\"accountsChanged\", async (accounts) => {\n        if (accounts.length > 0) {\n          commit(\"setAccount\", accounts[0]);\n        } else {\n          await dispatch(\"resetApp\");\n        }\n        console.log(\"accountsChanged\");\n      });\n\n      provider.on(\"chainChanged\", async (chainId) => {\n        chainId = parseInt(chainId);\n        commit(\"setChainId\", chainId);\n        console.log(\"chainChanged\", chainId);\n      });\n    },\n\n    async loadCollections({ commit, state }) {\n      axios.get(\"http://localhost:3000/getCollections\").then(function(response) {\n        console.log(response.data);\n        commit(\"setCollectionList\", response.data);\n      });\n    },\n\n    async loadNFTs({ commit, state }, {address, collection_id}) {\n      axios.get(\"http://localhost:3000/getNFTs?collection_id=\"+collection_id).then(function(response) {\n        console.log(response.data);\n        commit(\"setNFTList\", response.data);\n      });\n    },\n\n    async getFundContract({ commit, state }, fundAddress) {\n      try {\n        var fundChecksumAddress = Web3.utils.toChecksumAddress(fundAddress);\n        var fundContract = new state.web3.eth.Contract(collectionABI, fundChecksumAddress);\n        return fundContract;\n      } catch (error) {\n        console.log(error);\n        console.log(\"connected contract not found\");\n        return null;\n      }\n    },\n\n    async buyFundTokens({ commit }, { maticAmount, contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n        var weiAmount = Web3.utils.toWei(maticAmount, 'ether');\n        await fundContract.methods.buyTokens().send({\n          value: weiAmount,\n          from: this.state.account,\n        });\n        this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n        //return false;\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async sellFundTokens({ commit }, { tokenAmount, contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n        console.log(tokenAmount);\n        tokenAmount = Web3.utils.toWei(tokenAmount, 'ether');\n        // todo: multiple tokenAmount by 10^18 before sending\n        await fundContract.methods.sellTokens(tokenAmount).send({\n          from: this.state.account,\n        });\n        console.log(contractId);\n        this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async pauseBuyAndSell({ commit }, { contractId }) {\n      var fundContract = await this.dispatch(\"getFundContract\", contractId);\n\n      await fundContract.methods.toggleTokenConversion().send({\n        from: this.state.account,\n      });\n      this.dispatch(\"refreshBalance\", contractId);\n    },\n\n    async toggleBuy({ commit }, { contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n\n        await fundContract.methods.toggleBuying().send({\n          from: this.state.account,\n        });\n        this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async toggleSell({ commit }, { contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n\n        await fundContract.methods.toggleSelling().send({\n          from: this.state.account,\n        });\n        this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async transferFunds({ commit }, { contractId, toAddress, value }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n        var to = Web3.utils.toChecksumAddress(toAddress);\n        var ethAmount = Web3.utils.toWei(value, 'ether');\n        await fundContract.methods.transferFunds(to, ethAmount).send({\n          from: this.state.account,\n        });\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async refreshBalance({}, fundAddress) {\n      await this.dispatch(\"getMaticBalance\");\n      await this.dispatch(\"getCollectionDetails\", { collectionContractId: fundAddress });\n    },\n\n    async getMaticBalance({ commit, state }) {\n      var maticBalance = await state.web3.eth.getBalance(state.account);\n      commit(\"setMaticBalance\", Number(Web3.utils.fromWei(maticBalance, \"ether\")).toFixed(3));\n    },\n\n    async getCollectionDetails({ commit, state }, { collectionContractId }) {\n      var collectionDetails = {};\n\n      var fundContract = await this.dispatch(\"getFundContract\", collectionContractId);\n      collectionDetails.ownerAddress = await fundContract.methods.ownerAddress().call();\n      var tokenBuyPrice = await fundContract.methods._tokenBuyPrice().call();\n      collectionDetails.tokenBuyPrice = Number(Web3.utils.fromWei(tokenBuyPrice, \"ether\")).toFixed(3);\n      var tokenSellPrice = await fundContract.methods._tokenSellPrice().call();\n      collectionDetails.tokenSellPrice = Number(Web3.utils.fromWei(tokenSellPrice, \"ether\")).toFixed(3);\n      collectionDetails.name = await fundContract.methods.name().call();\n      collectionDetails.symbol = await fundContract.methods.symbol().call();\n      collectionDetails.totalSupply = Number(Web3.utils.fromWei(await fundContract.methods.totalSupply().call())).toFixed(3);\n      var userTokenBalance = await fundContract.methods.balanceOf(state.account).call();\n      collectionDetails.userTokenBalance = Number(Web3.utils.fromWei(userTokenBalance, \"ether\")).toFixed(3);\n      var contractBalance = await state.web3.eth.getBalance(collectionContractId);\n      collectionDetails.contractBalance = Number(Web3.utils.fromWei(contractBalance, \"ether\")).toFixed(3);\n      // collectionDetails.buyingEnabled=true;\n      // collectionDetails.sellingEnabled=true;\n      collectionDetails.buyingEnabled = await fundContract.methods.buyingEnabled().call();\n      collectionDetails.sellingEnabled = await fundContract.methods.sellingEnabled().call();\n\n      commit(\"setCollectionDetails\", collectionDetails);\n    },\n\n    async setTokenPrice({ commit }, { tokenPrice, isBuyBeingModified, contractId }) {\n      try {\n        var fundContract = await this.dispatch(\"getFundContract\", contractId);\n        var res = await fundContract.methods.setTokenPrice(tokenPrice, isBuyBeingModified).send({\n          from: this.state.account,\n        });\n\n        await this.dispatch(\"refreshBalance\", contractId);\n        commit(\"setIsError\", 0);\n      } catch (error) {\n        console.log(error);\n        commit(\"setIsError\", 1);\n      }\n    },\n\n    async createFund({ commit, state }, { fundName, fundSymbl, tokenPrice, depositAmt, imgUrl }) {\n      var depositAmtInWei = Web3.utils.toWei(depositAmt, 'ether');\n      var fundFactoryContract = await this.dispatch(\"getFundFactoryContract\");\n      var res = await fundFactoryContract.methods.createFund(fundName, fundSymbl, tokenPrice, imgUrl).send({\n        from: this.state.account,\n        value: depositAmtInWei,\n      });\n\n      await this.dispatch(\"loadFundData\");\n    },\n\n    async getNFTsInAddress({ commit, state }, { address }) {\n      console.log(address);\n      const options = { chain: \"rinkeby\", address: address };\n      const nftsInAddress = await Moralis.Web3API.account.getNFTs(options);\n      console.log(nftsInAddress);\n      commit(\"setNftListInAddress\", { nftList: nftsInAddress[\"result\"], fundAddress: address });\n      return nftsInAddress;\n    },\n  },\n});\n"]}]}